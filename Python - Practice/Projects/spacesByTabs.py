import re

def get_num_spaces_generated_by_t(formatted_string):
    """Gets the number of spaces generated by \t in the Python standard output (stdout) console.

    Args:
      formatted_string: The stdout console.

    Returns:
      The number of spaces generated by \t.
    """

    match = re.search(r'\t', formatted_string)
    if match:
      return len(match.group())
    else:
      return 0

    # Example usage:

#     stdout_console = 'This is a line with a tab character\t.'
#     num_spaces = get_num_spaces_generated_by_t(stdout_console)
# 
#     print(f'The number of spaces generated by \t is: {num_spaces} ')

def numOfSpace(formatted_string):
    # Example f-string with a tab character
    
#    formatted_string = f"| {'Column1'}\t| {'Column2'}\t| {'Column3'} |"

    # Calculate the length of the f-string
    fstring_length = len(formatted_string)

    # Initialize a variable to keep track of the current position
    current_position = 0

    # Initialize a variable to count the number of spaces generated by a tab
    tab_width = 8 # get_num_spaces_generated_by_t(formatted_string)  # Assume a tab width of 8 spaces for this example

    # Loop through each character in the f-string
    for char in formatted_string:
        if char == '\t':
            # Calculate the number of spaces generated by the tab and add to the current position
            spaces_generated = tab_width - (current_position % tab_width)
            current_position += spaces_generated
        else:
            # Increment the current position by 1 for other characters
            current_position += 1

    # Now, 'current_position' contains the total number of characters printed in the console,
    # and 'tab_width' contains the number of spaces generated by the tab character.
    # 'fstring_length' contains the length of the f-string.

    return current_position

if __name__ == '__main__' :
	numOfSpace(f"| {'Column1'}\t| {'Column2'}\t| {'Column3'} |")